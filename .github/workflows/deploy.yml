name: Deploy to VPS

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Перейти в директорию проекта
            cd ${{ secrets.DEPLOY_PATH || '/var/www/math-app' }}

            # Остановить контейнеры
            echo "Stopping containers..."
            docker-compose down

            # Получить последние изменения
            echo "Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main || git reset --hard origin/master

            # Создать директории для данных если их нет
            mkdir -p data/database data/public-images data/temp

            # Пересобрать образ
            echo "Building Docker image..."
            docker-compose build --no-cache

            # Запустить контейнеры
            echo "Starting containers..."
            docker-compose up -d

            # Очистка старых образов
            echo "Cleaning up old images..."
            docker image prune -f

            # Проверка статуса
            echo "Checking container status..."
            docker-compose ps

            echo "Deployment completed!"

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Ждем 10 секунд для запуска приложения
            sleep 10

            # Проверяем health endpoint
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health)

            if [ "$response" = "200" ]; then
              echo "Health check passed!"
              exit 0
            else
              echo "Health check failed! Status code: $response"
              exit 1
            fi

      - name: Notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
          fi
