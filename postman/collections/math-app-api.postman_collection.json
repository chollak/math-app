{
  "info": {
    "name": "Math App API",
    "description": "Complete API collection for Math App with automatic tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "{{base_url}}",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "{{admin_token}}",
      "type": "string"
    },
    {
      "key": "device_id",
      "value": "{{device_id}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "📝 Questions",
      "description": "CRUD operations for questions with suboptions support",
      "item": [
        {
          "name": "Get All Questions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/questions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "questions"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.json().length > 0) {",
                  "    pm.test('First question has required fields', function () {",
                  "        const question = pm.response.json()[0];",
                  "        pm.expect(question).to.have.property('id');",
                  "        pm.expect(question).to.have.property('question');",
                  "        pm.expect(question).to.have.property('options');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Russian Questions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/questions?language=ru",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "questions"
              ],
              "query": [
                {
                  "key": "language",
                  "value": "ru"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Only Russian questions returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    if (response.length > 0) {",
                  "        response.forEach(question => {",
                  "            pm.expect(question.language).to.equal('ru');",
                  "            pm.expect(question).to.have.property('question');",
                  "            pm.expect(question).to.not.have.property('question_kz');",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Kazakh Questions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/questions?language=kz",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "questions"
              ],
              "query": [
                {
                  "key": "language",
                  "value": "kz"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Only Kazakh questions returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    if (response.length > 0) {",
                  "        response.forEach(question => {",
                  "            pm.expect(question.language).to.equal('kz');",
                  "            pm.expect(question).to.have.property('question');",
                  "            pm.expect(question).to.not.have.property('question_ru');",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Question (Simple)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Test question created by Postman\",\n  \"language\": \"ru\",\n  \"topic\": \"ALG\",\n  \"answer\": \"B\",\n  \"level\": 1,\n  \"options\": [\n    \"Option A\",\n    \"Option B\",\n    \"Option C\",\n    \"Option D\"\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/questions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "questions"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Question created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.question).to.equal('Test question created by Postman');",
                  "    ",
                  "    // Save question ID for other requests",
                  "    pm.collectionVariables.set('test_question_id', response.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Question (With Suboptions)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Complex question with suboptions\",\n  \"language\": \"ru\",\n  \"topic\": \"EQS\",\n  \"answer\": \"A1B2\",\n  \"level\": 3,\n  \"options\": [\n    {\n      \"text\": \"A) Find x\",\n      \"suboptions\": [\n        {\n          \"text\": \"1\",\n          \"correct\": false\n        },\n        {\n          \"text\": \"2\",\n          \"correct\": true\n        },\n        {\n          \"text\": \"3\",\n          \"correct\": false\n        }\n      ]\n    },\n    {\n      \"text\": \"B) Find y\",\n      \"suboptions\": [\n        {\n          \"text\": \"4\",\n          \"correct\": false\n        },\n        {\n          \"text\": \"5\",\n          \"correct\": true\n        },\n        {\n          \"text\": \"6\",\n          \"correct\": false\n        }\n      ]\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/questions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "questions"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Complex question created with suboptions', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.options).to.be.an('array');",
                  "    pm.expect(response.options[0]).to.have.property('suboptions');",
                  "    ",
                  "    // Save complex question ID",
                  "    pm.collectionVariables.set('complex_question_id', response.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Question by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/questions/{{test_question_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "questions",
                "{{test_question_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Question retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.id).to.equal(parseInt(pm.collectionVariables.get('test_question_id')));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Question",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Updated test question\",\n  \"language\": \"ru\",\n  \"topic\": \"GEO\",\n  \"answer\": \"C\",\n  \"level\": 2,\n  \"options\": [\n    \"New A\",\n    \"New B\",\n    \"New C\",\n    \"New D\"\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/questions/{{test_question_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "questions",
                "{{test_question_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Question updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.question).to.equal('Updated test question');",
                  "    pm.expect(response.topic).to.equal('GEO');",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Question",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/questions/{{test_question_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "questions",
                "{{test_question_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Question deleted successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.deleted).to.be.true;",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📚 Contexts",
      "description": "CRUD operations for question contexts",
      "item": [
        {
          "name": "Get All Contexts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/contexts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "contexts"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Context",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Context\",\n  \"text\": \"This is a test context created by Postman\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/contexts",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "contexts"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Context created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.collectionVariables.set('test_context_id', response.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Context by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/contexts/{{test_context_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "contexts",
                "{{test_context_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Context",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Test Context\",\n  \"text\": \"This context has been updated\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/contexts/{{test_context_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "contexts",
                "{{test_context_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Context",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/contexts/{{test_context_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "contexts",
                "{{test_context_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📁 Files",
      "description": "File management operations",
      "item": [
        {
          "name": "List All Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "files"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Files list returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('files');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response.files).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🎯 Exams",
      "description": "Exam system with automatic scoring",
      "item": [
        {
          "name": "Start Exam",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"{{device_id}}\",\n  \"questionCount\": 5,\n  \"filters\": {\n    \"topic\": \"ALG\",\n    \"language\": \"ru\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/exams/start",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "exams",
                "start"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Exam started successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('examId');",
                  "    pm.expect(response).to.have.property('totalQuestions');",
                  "    ",
                  "    // Save exam ID for subsequent requests",
                  "    pm.collectionVariables.set('exam_id', response.examId);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Start Kazakh Exam",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"{{device_id}}\",\n  \"questionCount\": 5,\n  \"filters\": {\n    \"language\": \"kz\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/exams/start",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "exams",
                "start"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Kazakh exam started successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('examId');",
                  "    pm.expect(response).to.have.property('totalQuestions');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Exam Questions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exams/{{exam_id}}/questions",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "exams",
                "{{exam_id}}",
                "questions"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Exam questions retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Save first question ID for answers",
                  "    if (response.length > 0) {",
                  "        pm.collectionVariables.set('first_question_id', response[0].questionId);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Submit Exam",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceId\": \"{{device_id}}\",\n  \"answers\": [\n    {\n      \"questionId\": \"{{first_question_id}}\",\n      \"answer\": \"A\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/exams/{{exam_id}}/submit",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "exams",
                "{{exam_id}}",
                "submit"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});",
                  "",
                  "pm.test('Exam submitted successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('exam');",
                  "    pm.expect(response).to.have.property('questions');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Exam History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/exams/history/{{device_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "exams",
                "history",
                "{{device_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "⚙️ System",
      "description": "System endpoints and health checks",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('OK');",
                  "    pm.expect(response).to.have.property('database');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "API Documentation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                ""
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/{{device_id}}/stats",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{device_id}}",
                "stats"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is successful\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);\n});\n\npm.test(\"Response time is less than 5000ms\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(5000);\n});\n\npm.test(\"Response has correct Content-Type\", function () {\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}