const { S3Client, PutObjectCommand, DeleteObjectCommand, GetObjectCommand } = require('@aws-sdk/client-s3');
const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');
const fs = require('fs').promises;
const path = require('path');

/**
 * Cloud Storage Service
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - AWS S3
 * - Cloudflare R2 (S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
 * - DigitalOcean Spaces
 * - –õ—é–±–æ–µ S3-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 *
 * –î–ª—è Cloudflare R2:
 * - –î–µ—à–µ–≤–ª–µ AWS S3 ($0.015/GB vs $0.023/GB)
 * - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π egress (–≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
 * - S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
 */

class CloudStorageService {
  constructor() {
    this.enabled = process.env.CLOUD_STORAGE_ENABLED === 'true';

    if (!this.enabled) {
      console.log('‚òÅÔ∏è  Cloud storage is disabled. Using local storage.');
      return;
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞
    this.client = new S3Client({
      region: process.env.S3_REGION || 'auto',
      endpoint: process.env.S3_ENDPOINT, // –î–ª—è R2: https://ACCOUNT_ID.r2.cloudflarestorage.com
      credentials: {
        accessKeyId: process.env.S3_ACCESS_KEY_ID,
        secretAccessKey: process.env.S3_SECRET_ACCESS_KEY
      }
    });

    this.bucket = process.env.S3_BUCKET_NAME;
    this.cdnUrl = process.env.CDN_URL; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–∞—Å—Ç–æ–º–Ω—ã–π CDN URL

    console.log(`‚òÅÔ∏è  Cloud storage enabled: ${this.bucket}`);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –æ–±–ª–∞–∫–æ
   */
  async uploadFile(localPath, key, metadata = {}) {
    if (!this.enabled) {
      throw new Error('Cloud storage is not enabled');
    }

    try {
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const fileContent = await fs.readFile(localPath);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type
      const ext = path.extname(key).toLowerCase();
      const contentType = this.getContentType(ext);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
      const command = new PutObjectCommand({
        Bucket: this.bucket,
        Key: key,
        Body: fileContent,
        ContentType: contentType,
        Metadata: metadata,
        // –î–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        // ACL: 'public-read', // –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è R2
        CacheControl: 'public, max-age=31536000, immutable' // 1 –≥–æ–¥
      });

      await this.client.send(command);

      console.log(`‚úÖ Uploaded to cloud: ${key}`);

      return this.getPublicUrl(key);

    } catch (error) {
      console.error('Cloud upload error:', error);
      throw new Error(`Failed to upload to cloud storage: ${error.message}`);
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
   */
  async uploadMultipleFiles(files) {
    const results = [];

    for (const file of files) {
      const url = await this.uploadFile(file.localPath, file.key, file.metadata);
      results.push({
        key: file.key,
        url: url,
        localPath: file.localPath
      });
    }

    return results;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –æ–±–ª–∞–∫–∞
   */
  async deleteFile(key) {
    if (!this.enabled) {
      throw new Error('Cloud storage is not enabled');
    }

    try {
      const command = new DeleteObjectCommand({
        Bucket: this.bucket,
        Key: key
      });

      await this.client.send(command);
      console.log(`üóëÔ∏è  Deleted from cloud: ${key}`);

    } catch (error) {
      console.error('Cloud delete error:', error);
      throw new Error(`Failed to delete from cloud storage: ${error.message}`);
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
   */
  async deleteMultipleFiles(keys) {
    for (const key of keys) {
      await this.deleteFile(key);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
   */
  getPublicUrl(key) {
    if (this.cdnUrl) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π CDN URL
      return `${this.cdnUrl}/${key}`;
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π S3 URL
    if (process.env.S3_ENDPOINT) {
      // –î–ª—è R2 –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      return `${process.env.S3_ENDPOINT}/${this.bucket}/${key}`;
    }

    // AWS S3
    return `https://${this.bucket}.s3.${process.env.S3_REGION}.amazonaws.com/${key}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (Presigned URL)
   * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é –≤ S3, –º–∏–Ω—É—è –±—ç–∫–µ–Ω–¥
   */
  async generatePresignedUploadUrl(key, expiresIn = 3600) {
    if (!this.enabled) {
      throw new Error('Cloud storage is not enabled');
    }

    try {
      const command = new PutObjectCommand({
        Bucket: this.bucket,
        Key: key,
        ContentType: this.getContentType(path.extname(key))
      });

      const url = await getSignedUrl(this.client, command, { expiresIn });

      return {
        uploadUrl: url,
        key: key,
        expiresAt: new Date(Date.now() + expiresIn * 1000).toISOString()
      };

    } catch (error) {
      console.error('Presigned URL generation error:', error);
      throw new Error(`Failed to generate presigned URL: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã)
   */
  async generatePresignedDownloadUrl(key, expiresIn = 3600) {
    if (!this.enabled) {
      throw new Error('Cloud storage is not enabled');
    }

    try {
      const command = new GetObjectCommand({
        Bucket: this.bucket,
        Key: key
      });

      const url = await getSignedUrl(this.client, command, { expiresIn });
      return url;

    } catch (error) {
      console.error('Presigned download URL error:', error);
      throw new Error(`Failed to generate presigned download URL: ${error.message}`);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Content-Type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
   */
  getContentType(ext) {
    const types = {
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.webp': 'image/webp',
      '.gif': 'image/gif',
      '.svg': 'image/svg+xml',
      '.pdf': 'application/pdf',
      '.mp4': 'video/mp4',
      '.mp3': 'audio/mpeg'
    };

    return types[ext.toLowerCase()] || 'application/octet-stream';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  async healthCheck() {
    if (!this.enabled) {
      return { status: 'disabled' };
    }

    try {
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      const testKey = `health-check-${Date.now()}.txt`;
      const testContent = Buffer.from('health check');

      await this.client.send(new PutObjectCommand({
        Bucket: this.bucket,
        Key: testKey,
        Body: testContent
      }));

      await this.deleteFile(testKey);

      return { status: 'healthy', bucket: this.bucket };

    } catch (error) {
      return { status: 'unhealthy', error: error.message };
    }
  }
}

module.exports = new CloudStorageService();
