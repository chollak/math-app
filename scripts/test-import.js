const fs = require('fs');
const path = require('path');

// –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞ –∫–æ–ø–∏–∏ –±–∞–∑—ã

const QUESTIONS_FILE = path.join(__dirname, 'questions-import.txt');

function testQuestionsParsing() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ questions.txt...\n');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const content = fs.readFileSync(QUESTIONS_FILE, 'utf8');
    console.log(`üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(content.length / 1024).toFixed(2)} KB`);
    
    // –ü–∞—Ä—Å–∏–º JSON
    const questions = JSON.parse(content);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questions.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const languages = {};
    const topics = {};
    let withSuboptions = 0;
    
    questions.forEach(q => {
      languages[q.language] = (languages[q.language] || 0) + 1;
      topics[q.topic] = (topics[q.topic] || 0) + 1;
      
      if (q.options && q.options.some(opt => opt.suboptions)) {
        withSuboptions++;
      }
    });
    
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log('   –Ø–∑—ã–∫–∏:', languages);
    console.log('   –¢–µ–º—ã:', topics);
    console.log(`   –° –ø–æ–¥–æ–ø—Ü–∏—è–º–∏: ${withSuboptions}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:');
    console.log('   –Ø–∑—ã–∫:', questions[0].language);
    console.log('   –¢–µ–º–∞:', questions[0].topic);
    console.log('   –¢–µ–∫—Å—Ç:', questions[0].question.substring(0, 100) + '...');
    console.log('   –û–ø—Ü–∏–π:', questions[0].options.length);
    
    console.log('\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω! –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É.');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
    return false;
  }
}

function createTestDatabase() {
  const sqlite3 = require('sqlite3').verbose();
  const testDbPath = path.join(__dirname, '../test-database.sqlite');
  
  console.log('\nüóÉÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(testDbPath, (err) => {
      if (err) {
        reject(err);
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      const createTables = `
        CREATE TABLE IF NOT EXISTS questions (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          question_ru TEXT,
          question_kz TEXT,
          language TEXT DEFAULT 'ru',
          answer TEXT NOT NULL,
          level INTEGER,
          topic TEXT,
          photos TEXT DEFAULT '[]',
          context_id INTEGER,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS answer_options (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          question_id INTEGER NOT NULL,
          option_letter TEXT NOT NULL,
          option_text_ru TEXT,
          option_text_kz TEXT,
          order_index INTEGER NOT NULL,
          FOREIGN KEY (question_id) REFERENCES questions (id) ON DELETE CASCADE
        );
        
        CREATE TABLE IF NOT EXISTS suboptions (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          option_id INTEGER NOT NULL,
          text TEXT NOT NULL,
          correct BOOLEAN NOT NULL DEFAULT 0,
          order_index INTEGER NOT NULL,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (option_id) REFERENCES answer_options (id) ON DELETE CASCADE
        );
      `;
      
      db.exec(createTables, (err) => {
        db.close();
        if (err) {
          reject(err);
        } else {
          console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞: ${testDbPath}`);
          resolve(testDbPath);
        }
      });
    });
  });
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞...\n');
  
  // –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
  const parseSuccess = testQuestionsParsing();
  if (!parseSuccess) {
    console.log('‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –ø–∞—Ä—Å–∏–Ω–≥–∞');
    return;
  }
  
  // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã
  try {
    const testDbPath = await createTestDatabase();
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–º–ø–æ—Ä—Ç.');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/import-questions.js');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –∏–∑ –±—ç–∫–∞–ø–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { testQuestionsParsing, createTestDatabase };