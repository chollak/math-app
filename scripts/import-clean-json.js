const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();

// –ò–ú–ü–û–†–¢ –í–û–ü–†–û–°–û–í –ò–ó scripts/output_clean.json
// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ JSON —Ñ–æ—Ä–º–∞—Ç–∞ —Å –ø–∞—Ä–∞–º–∏ ru/kz –≤–æ–ø—Ä–æ—Å–æ–≤

const BACKUP_DIR = path.join(__dirname, '../backups');
const JSON_FILE = path.join(__dirname, 'output_clean.json');

class CleanJsonImporter {
  constructor(dbPath) {
    this.dbPath = dbPath;
    this.db = null;
    this.importStats = {
      totalQuestions: 0,
      questionPairs: 0,
      imported: 0,
      errors: 0,
      duplicates: 0
    };
  }

  // 1. –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò
  async createBackup() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupName = `database-backup-clean-json-${timestamp}.sqlite`;
    const backupPath = path.join(BACKUP_DIR, backupName);

    if (!fs.existsSync(BACKUP_DIR)) {
      fs.mkdirSync(BACKUP_DIR, { recursive: true });
    }

    fs.copyFileSync(this.dbPath, backupPath);
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
    return backupPath;
  }

  // 2. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´
  async validateDatabase() {
    return new Promise((resolve, reject) => {
      this.db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='questions'", (err, row) => {
        if (err) reject(err);
        if (!row) reject(new Error('–¢–∞–±–ª–∏—Ü–∞ questions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
        resolve(true);
      });
    });
  }

  // 3. –ó–ê–ì–†–£–ó–ö–ê JSON
  loadQuestions() {
    try {
      const content = fs.readFileSync(JSON_FILE, 'utf8');
      const questions = JSON.parse(content);
      
      if (!Array.isArray(questions)) {
        throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤');
      }

      this.importStats.totalQuestions = questions.length;
      console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞`);
      return questions;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  }

  // 4. –ì–†–£–ü–ü–ò–†–û–í–ö–ê –í–û–ü–†–û–°–û–í –ü–û –ü–ê–†–ê–ú RU/KZ
  groupQuestionPairs(questions) {
    const pairs = [];
    const processed = new Set();

    for (const question of questions) {
      if (processed.has(question)) continue;
      
      if (question.language === 'ru') {
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
        const kzQuestion = questions.find(q => 
          q.language === 'kz' && 
          q.topic === question.topic && 
          q.answer === question.answer &&
          q.level === question.level &&
          this.arraysEqual(q.options, question.options) // –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ–ø—Ü–∏–∏
        );

        pairs.push({
          ru: question,
          kz: kzQuestion || null,
          topic: question.topic,
          answer: question.answer,
          level: question.level,
          options: question.options
        });

        processed.add(question);
        if (kzQuestion) processed.add(kzQuestion);
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–∑–∞—Ö—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –ø–∞—Ä—ã
    for (const question of questions) {
      if (!processed.has(question) && question.language === 'kz') {
        pairs.push({
          ru: null,
          kz: question,
          topic: question.topic,
          answer: question.answer,
          level: question.level,
          options: question.options
        });
        processed.add(question);
      }
    }

    this.importStats.questionPairs = pairs.length;
    console.log(`üîó –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${pairs.length} –ø–∞—Ä –≤–æ–ø—Ä–æ—Å–æ–≤`);
    return pairs;
  }

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –æ–ø—Ü–∏–π
  arraysEqual(arr1, arr2) {
    if (!arr1 || !arr2) return false;
    if (arr1.length !== arr2.length) return false;
    return arr1.every((val, index) => val === arr2[index]);
  }

  // 5. –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´
  async checkForDuplicates(questionPair) {
    return new Promise((resolve) => {
      const ruText = questionPair.ru ? questionPair.ru.question : null;
      const kzText = questionPair.kz ? questionPair.kz.question : null;
      
      if (!ruText && !kzText) {
        resolve(false);
        return;
      }

      const sql = `
        SELECT id FROM questions 
        WHERE (question_ru = ? OR question_kz = ?) OR 
              (question_ru = ? OR question_kz = ?)
      `;
      
      this.db.get(sql, [ruText, ruText, kzText, kzText], (err, row) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', err);
          resolve(false);
        } else {
          resolve(!!row);
        }
      });
    });
  }

  // 6. –ò–ú–ü–û–†–¢ –û–î–ù–û–ô –ü–ê–†–´ –í–û–ü–†–û–°–û–í
  async importQuestionPair(questionPair) {
    return new Promise((resolve, reject) => {
      const { ru, kz, topic, answer, level, options } = questionPair;
      
      // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
      const questionData = {
        question_ru: ru ? ru.question : null,
        question_kz: kz ? kz.question : null,
        language: ru ? 'ru' : 'kz', // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä—É—Å—Å–∫–æ–º—É
        answer: answer,
        level: level || 1,
        topic: topic,
        context_id: null,
        photos: '[]'
      };

      // SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
      const sql = `
        INSERT INTO questions (
          question_ru, question_kz, language, answer, level, topic, context_id, photos
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `;

      this.db.run(sql, [
        questionData.question_ru,
        questionData.question_kz,
        questionData.language,
        questionData.answer,
        questionData.level,
        questionData.topic,
        questionData.context_id,
        questionData.photos
      ], function(err) {
        if (err) {
          reject(err);
          return;
        }

        const questionId = this.lastID;
        resolve({ questionId, options });
      });
    });
  }

  // 7. –ò–ú–ü–û–†–¢ –û–ü–¶–ò–ô –î–õ–Ø –í–û–ü–†–û–°–ê
  async importOptions(questionId, options) {
    return new Promise((resolve, reject) => {
      if (!options || !Array.isArray(options)) {
        resolve();
        return;
      }

      let completed = 0;
      let hasError = false;

      options.forEach((optionText, index) => {
        const optionLetter = String.fromCharCode(65 + index); // A, B, C, D...
        
        const sql = `
          INSERT INTO answer_options (
            question_id, option_letter, option_text_ru, option_text_kz, order_index
          ) VALUES (?, ?, ?, ?, ?)
        `;

        this.db.run(sql, [
          questionId,
          optionLetter,
          optionText, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–æ–∏—Ö —è–∑—ã–∫–æ–≤
          optionText,
          index
        ], (err) => {
          if (err) {
            if (!hasError) {
              hasError = true;
              reject(err);
            }
            return;
          }

          completed++;
          if (completed === options.length) {
            resolve();
          }
        });
      });

      if (options.length === 0) {
        resolve();
      }
    });
  }

  // 8. –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° –ò–ú–ü–û–†–¢–ê
  async import() {
    try {
      console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ temp/output_clean.json...\n');

      // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const backupPath = await this.createBackup();

      // –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
      this.db = new sqlite3.Database(this.dbPath);
      await this.validateDatabase();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');

      // –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
      const questions = this.loadQuestions();

      // –®–∞–≥ 4: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ –ø–∞—Ä—ã
      const questionPairs = this.groupQuestionPairs(questions);

      // –®–∞–≥ 5: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É
      console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –ø–∞—Ä –≤–æ–ø—Ä–æ—Å–æ–≤...\n');
      
      for (let i = 0; i < questionPairs.length; i++) {
        const pair = questionPairs[i];
        
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
          const isDuplicate = await this.checkForDuplicates(pair);
          if (isDuplicate) {
            const questionText = pair.ru ? pair.ru.question : pair.kz.question;
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: ${questionText.substring(0, 50)}...`);
            this.importStats.duplicates++;
            continue;
          }

          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤
          const result = await this.importQuestionPair(pair);
          
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏
          await this.importOptions(result.questionId, result.options);
          
          this.importStats.imported++;
          
          if (this.importStats.imported % 50 === 0) {
            console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${this.importStats.imported}/${questionPairs.length} –ø–∞—Ä`);
          }

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞—Ä—ã ${i + 1}: ${error.message}`);
          this.importStats.errors++;
        }
      }

      // –®–∞–≥ 6: –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.printStats();
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      console.log(`üîÑ –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é`);
    } finally {
      if (this.db) {
        this.db.close();
      }
    }
  }

  printStats() {
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê:');
    console.log(`   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ JSON: ${this.importStats.totalQuestions}`);
    console.log(`   –ü–∞—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: ${this.importStats.questionPairs}`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${this.importStats.imported}`);
    console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${this.importStats.duplicates}`);
    console.log(`   –û—à–∏–±–æ–∫: ${this.importStats.errors}`);
    console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  }
}

// –ó–ê–ü–£–°–ö –ò–ú–ü–û–†–¢–ê
async function main() {
  // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const storageConfig = require('../src/config/storage');
  const dbPath = storageConfig.databasePath;
  
  console.log(`üìç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
  if (!fs.existsSync(JSON_FILE)) {
    console.error(`‚ùå –§–∞–π–ª ${JSON_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    console.error(`üìç –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: scripts/output_clean.json`);
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  if (!fs.existsSync(dbPath)) {
    console.error(`‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${dbPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    process.exit(1);
  }

  const importer = new CleanJsonImporter(dbPath);
  await importer.import();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = CleanJsonImporter;