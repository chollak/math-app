const fs = require('fs');
const path = require('path');

const QUESTIONS_FILE = path.join(__dirname, '../temp/questions.txt');

function fixJsonSyntax() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...');
  
  let content = fs.readFileSync(QUESTIONS_FILE, 'utf8');
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
  const fixes = [
    // –ü–æ—Å–ª–µ "topic": "CAL" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø—è—Ç–∞—è
    {
      pattern: /"topic": "CAL"\s*\n\s*"language":/g,
      replacement: '"topic": "CAL",\n  "language":'
    },
    // –ü–æ—Å–ª–µ "topic": "GEO" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø—è—Ç–∞—è  
    {
      pattern: /"topic": "GEO"\s*\n\s*"language":/g,
      replacement: '"topic": "GEO",\n  "language":'
    },
    // –ü–æ—Å–ª–µ "topic": "ALG" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø—è—Ç–∞—è
    {
      pattern: /"topic": "ALG"\s*\n\s*"language":/g,
      replacement: '"topic": "ALG",\n  "language":'
    },
    // –ü–æ—Å–ª–µ text –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø—è—Ç–∞—è –ø–µ—Ä–µ–¥ suboptions
    {
      pattern: /"text": "([^"]*?)"\s*\n\s*"suboptions":/g,
      replacement: '"text": "$1",\n      "suboptions":'
    },
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏
    {
      pattern: /}\s*\n\s*{/g,
      replacement: '},\n{'
    }
  ];
  
  let fixCount = 0;
  fixes.forEach(fix => {
    const matches = content.match(fix.pattern);
    if (matches) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${matches.length} –º–µ—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${fix.pattern}`);
      content = content.replace(fix.pattern, fix.replacement);
      fixCount += matches.length;
    }
  });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.writeFileSync(QUESTIONS_FILE, content, 'utf8');
  console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${fixCount} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON
  try {
    JSON.parse(content);
    console.log('‚úÖ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    console.log('‚ùå –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏ JSON:', error.message);
    return false;
  }
}

if (require.main === module) {
  fixJsonSyntax();
}

module.exports = { fixJsonSyntax };