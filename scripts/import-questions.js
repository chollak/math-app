const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();

// –ë–ï–ó–û–ü–ê–°–ù–´–ô –ò–ú–ü–û–†–¢ –í–û–ü–†–û–°–û–í
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º

const BACKUP_DIR = path.join(__dirname, '../backups');
const QUESTIONS_FILE = path.join(__dirname, '../temp/questions.txt');

class SafeQuestionImporter {
  constructor(dbPath) {
    this.dbPath = dbPath;
    this.db = null;
    this.importStats = {
      processed: 0,
      imported: 0,
      errors: 0,
      duplicates: 0
    };
  }

  // 1. –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò
  async createBackup() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupName = `database-backup-${timestamp}.sqlite`;
    const backupPath = path.join(BACKUP_DIR, backupName);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(BACKUP_DIR)) {
      fs.mkdirSync(BACKUP_DIR, { recursive: true });
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    fs.copyFileSync(this.dbPath, backupPath);
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
    return backupPath;
  }

  // 2. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´
  async validateDatabase() {
    return new Promise((resolve, reject) => {
      this.db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='questions'", (err, row) => {
        if (err) reject(err);
        if (!row) reject(new Error('–¢–∞–±–ª–∏—Ü–∞ questions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
        resolve(true);
      });
    });
  }

  // 3. –ó–ê–ì–†–£–ó–ö–ê –ò –í–ê–õ–ò–î–ê–¶–ò–Ø JSON
  loadQuestions() {
    try {
      const content = fs.readFileSync(QUESTIONS_FILE, 'utf8');
      const questions = JSON.parse(content);
      
      if (!Array.isArray(questions)) {
        throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤');
      }

      console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞`);
      return questions;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  }

  // 4. –ì–†–£–ü–ü–ò–†–û–í–ö–ê –í–û–ü–†–û–°–û–í –ü–û –ü–ê–†–ê–ú RU/KZ
  groupQuestionPairs(questions) {
    const pairs = [];
    const ruQuestions = questions.filter(q => q.language === 'ru');
    
    for (const ruQuestion of ruQuestions) {
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
      const kzQuestion = questions.find(q => 
        q.language === 'kz' && 
        q.topic === ruQuestion.topic && 
        this.questionsAreSimilar(ruQuestion, q)
      );

      pairs.push({
        ru: ruQuestion,
        kz: kzQuestion || null,
        topic: ruQuestion.topic
      });
    }

    console.log(`üîó –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${pairs.length} –ø–∞—Ä –≤–æ–ø—Ä–æ—Å–æ–≤`);
    return pairs;
  }

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
  questionsAreSimilar(q1, q2) {
    if (!q2) return false;
    return q1.options.length === q2.options.length;
  }

  // 5. –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´
  async checkForDuplicates(questionPair) {
    return new Promise((resolve) => {
      const ruText = questionPair.ru.question;
      const sql = `SELECT id FROM questions WHERE question_ru = ? OR question_kz = ?`;
      
      this.db.get(sql, [ruText, ruText], (err, row) => {
        resolve(!!row); // true –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω
      });
    });
  }

  // 6. –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê (–±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–ø—Ü–∏—é)
  generateAnswer(questionData) {
    for (let i = 0; i < questionData.options.length; i++) {
      const option = questionData.options[i];
      if (option.suboptions) {
        const correctSub = option.suboptions.find(sub => sub.correct);
        if (correctSub) {
          return String.fromCharCode(65 + i); // A, B, C, D...
        }
      }
    }
    return 'A'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  // 7. –ò–ú–ü–û–†–¢ –û–î–ù–û–ì–û –í–û–ü–†–û–°–ê
  async importQuestion(questionPair) {
    return new Promise((resolve, reject) => {
      const { ru, kz, topic } = questionPair;
      
      // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
      const questionData = {
        question_ru: ru.question,
        question_kz: kz ? kz.question : null,
        language: 'ru', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        answer: this.generateAnswer(ru),
        level: 1, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Ä–æ–≤–µ–Ω—å 1
        topic: topic,
        photos: '[]',
        context_id: null
      };

      // –í—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
      const sql = `
        INSERT INTO questions (
          question_ru, question_kz, language, answer, level, topic, photos, context_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `;

      this.db.run(sql, [
        questionData.question_ru,
        questionData.question_kz,
        questionData.language,
        questionData.answer,
        questionData.level,
        questionData.topic,
        questionData.photos,
        questionData.context_id
      ], function(err) {
        if (err) {
          reject(err);
          return;
        }

        const questionId = this.lastID;
        resolve({ questionId, questionData, options: ru.options });
      });
    });
  }

  // 8. –ò–ú–ü–û–†–¢ –û–ü–¶–ò–ô
  async importOptions(questionId, options, language) {
    const AnswerOption = require('../src/models/AnswerOption');
    
    return new Promise((resolve, reject) => {
      AnswerOption.createBatch(questionId, options, language, (err, results) => {
        if (err) reject(err);
        else resolve(results);
      });
    });
  }

  // 9. –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° –ò–ú–ü–û–†–¢–ê
  async import() {
    try {
      console.log('üöÄ –ù–∞—á–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...\n');

      // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const backupPath = await this.createBackup();

      // –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
      this.db = new sqlite3.Database(this.dbPath);
      await this.validateDatabase();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');

      // –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
      const questions = this.loadQuestions();

      // –®–∞–≥ 4: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ –ø–∞—Ä—ã
      const questionPairs = this.groupQuestionPairs(questions);

      // –®–∞–≥ 5: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É
      console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...\n');
      
      for (const pair of questionPairs) {
        try {
          this.importStats.processed++;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
          const isDuplicate = await this.checkForDuplicates(pair);
          if (isDuplicate) {
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: ${pair.ru.question.substring(0, 50)}...`);
            this.importStats.duplicates++;
            continue;
          }

          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
          const result = await this.importQuestion(pair);
          
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏
          await this.importOptions(result.questionId, result.options, 'ru');
          
          this.importStats.imported++;
          console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å ${this.importStats.imported}/${questionPairs.length}`);

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞: ${error.message}`);
          this.importStats.errors++;
        }
      }

      // –®–∞–≥ 6: –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.printStats();
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      console.log(`üîÑ –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é`);
    } finally {
      if (this.db) {
        this.db.close();
      }
    }
  }

  printStats() {
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê:');
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.importStats.processed}`);
    console.log(`   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${this.importStats.imported}`);
    console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${this.importStats.duplicates}`);
    console.log(`   –û—à–∏–±–æ–∫: ${this.importStats.errors}`);
    console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  }

  // 10. –§–£–ù–ö–¶–ò–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ò–ó –ë–≠–ö–ê–ü–ê
  static restoreFromBackup(backupPath, targetPath) {
    try {
      fs.copyFileSync(backupPath, targetPath);
      console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ ${backupPath}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
    }
  }
}

// –ó–ê–ü–£–°–ö –ò–ú–ü–û–†–¢–ê
async function main() {
  // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const storageConfig = require('../src/config/storage');
  const dbPath = storageConfig.databasePath;
  
  console.log(`üìç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
  if (!fs.existsSync(QUESTIONS_FILE)) {
    console.error(`‚ùå –§–∞–π–ª ${QUESTIONS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  if (!fs.existsSync(dbPath)) {
    console.error(`‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${dbPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    process.exit(1);
  }

  const importer = new SafeQuestionImporter(dbPath);
  await importer.import();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = SafeQuestionImporter;